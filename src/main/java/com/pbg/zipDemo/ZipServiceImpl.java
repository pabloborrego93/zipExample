package com.pbg.zipDemo;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.springframework.core.io.InputStreamResource;
import org.springframework.stereotype.Service;

@Service
public class ZipServiceImpl implements ZipService {

	@Override
	public Map<String, byte[]> initializeMap() {
		byte[] icono = new byte[] { -119, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, -128, 0, 0, 0, -128, 8, 3, 0, 0, 0, -12, -32, -111, -7, 0, 0, 0, 25, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 65, 100, 111, 98, 101, 32, 73, 109, 97, 103, 101, 82, 101, 97, 100, 121, 113, -55, 101, 60, 0, 0, 0, 51, 80, 76, 84, 69, 4, 7, 7, -17, -17, -17, 51, 54, 54, 98, 100, 100, 20, 23, 23, -48, -48, -48, -64, -63, -63, -95, -94, -94, 67, 69, 69, -32, -32, -32, 35, 38, 38, -127, -125, -125, -111, -110, -110, 114, 116, 116, -80, -79, -79, 83, 85, 85, -1, -1, -1, 112, -28, 51, 58, 0, 0, 0, 17, 116, 82, 78, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 37, -83, -103, 98, 0, 0, 3, 39, 73, 68, 65, 84, 120, -38, -20, -38, -39, 114, -28, 32, 12, 5, 80, -127, -80, 49, 120, -53, -1, 127, -19, 36, -103, -75, -69, 89, -82, 100, 57, -87, -87, 66, -17, 105, -99, 96, 108, 4, -120, -34, -66, 57, 104, 0, 6, 96, 0, 6, 96, 0, 6, 96, 0, 6, -32, -1, 6, -72, -7, 61, -46, 119, 0, -90, -72, 46, -98, -2, 68, 94, -10, 109, -2, 50, 64, -38, -50, 64, -91, 88, -42, -23, 126, 64, -38, 60, 53, 34, -17, -23, 86, -64, -52, -44, -115, 37, -34, 6, -104, 23, -126, 34, -57, 91, 0, 104, -6, 79, -62, 97, 14, 112, 76, -94, 88, -110, 45, -32, 8, 36, -116, -80, 25, 2, -92, -1, -2, -81, 65, 112, 86, -128, -28, 73, 21, 97, -74, 1, 76, -127, -76, 17, 45, 0, -111, 46, -60, 126, 29, 112, 41, 63, 17, 95, 5, 92, -52, -33, 23, -48, -51, -7, -69, 79, -95, 13, -104, -56, 32, -94, 30, -112, -126, 5, -128, 102, 45, -64, 121, -109, -4, 20, -110, 18, -80, -109, 81, 120, 29, -32, 32, -77, 88, 53, 0, 23, -20, 0, 52, 41, 0, -69, 97, 126, 90, -28, -128, -119, 76, 35, -118, 1, -117, 45, 32, 59, 33, 96, 38, -29, 88, -123, -128, -59, 26, 16, -100, 8, -48, 28, -128, -22, -42, -128, 89, 62, 11, 42, -128, -10, 47, 85, 62, -111, -36, -4, -69, 44, 1, -72, -50, 127, 82, 20, 112, 71, 62, 11, 0, 91, 111, 36, 11, 2, -18, -115, 29, 11, 0, -66, -5, 36, 95, 4, -36, 125, 122, 1, 7, 36, 96, 38, 61, 9, 24, -104, 63, 7, 12, -88, -42, 65, 91, 109, -79, 126, 24, -34, 83, -14, 12, -118, -128, -77, -70, -82, -70, -78, -128, -95, 50, 62, -61, -128, -6, 58, 88, 22, 96, -7, -119, 18, 8, 104, -83, 67, 37, 1, -102, -65, -8, 45, 34, 105, 41, -4, 42, -128, -13, 23, -41, -125, 18, 96, 37, -119, 0, -49, 95, -84, 10, 72, -66, 16, 61, 10, 54, -63, 54, 50, -37, 0, 30, 5, -94, 109, 44, 8, -24, 87, -71, 78, -71, -115, 78, 70, -128, -78, 0, -40, -58, -49, 86, -128, -110, 0, 57, 70, -64, 0, -119, 52, 2, -24, 24, 3, 3, 96, -27, -32, -109, 0, 59, 70, -79, 4, 60, 125, 85, -80, 26, -46, -16, 17, 60, 47, 109, -40, 70, -42, 110, 18, -66, 46, -83, -112, -64, 14, -64, -70, -51, -68, 25, -128, -107, -57, 9, 19, 6, -16, -86, -4, -120, -64, 104, 45, 96, -19, -111, 74, 48, 89, -114, -97, -42, -33, -59, -31, -126, -59, -94, 32, 121, 89, -1, 61, 46, -40, 13, 74, -78, 66, -3, -127, 11, -48, -110, -84, 81, -108, 22, -21, 31, 88, 48, 93, 46, -53, 43, -11, 23, 40, 8, 112, 89, -66, -55, -14, -93, 2, 124, 99, -110, 16, -64, -61, -6, -9, -81, -96, 10, -120, 6, -101, 83, -82, -83, -65, 127, 5, -11, 71, -32, 44, -74, -25, 92, 91, -1, 127, 11, -22, -7, 79, -63, -10, 60, -11, 94, -125, 66, -3, -15, 83, -48, 120, 9, 14, -55, 17, -51, -39, 22, 20, -21, -97, 15, 65, 35, -65, -24, -120, -90, 89, 21, 113, -83, -2, -14, -82, -11, 17, 88, 101, -57, 116, -71, 33, 56, 107, 31, 42, -17, -51, -114, -23, 44, -18, 106, -82, 29, 84, -66, 121, -37, -4, 65, 122, 84, 107, 125, 86, -69, -54, -113, -21, 79, -45, -77, 106, -59, 125, 65, -78, -68, -80, -104, 53, 87, 54, -101, 93, -2, 93, 119, 105, 101, -10, 16, -68, 83, 94, -37, 101, -93, 55, 96, -46, 94, 92, 78, 54, -45, 32, -22, -81, 110, -29, -51, 19, -32, 75, 46, -81, -7, -38, -11, 61, -33, -100, -65, -33, -64, -64, -9, -26, -65, -69, -123, -93, -101, 31, 105, 98, -119, 119, -51, 63, -72, -115, 71, -5, 54, 6, -92, -89, 12, 107, 100, 82, -35, 34, 122, -88, -69, 16, 108, -27, -38, -28, -125, -80, 67, -115, 84, 112, 51, 91, 18, 14, 66, 70, 59, 60, -15, 118, -66, 67, -80, 50, -124, 21, -2, 89, 73, 67, 99, -52, 104, 122, -9, 118, 11, -32, -99, 0, 84, -118, 89, -110, 94, -34, -44, 58, 113, 123, 58, -14, 33, -4, 65, 69, 91, -17, -79, 87, -58, 33, -13, -31, -60, -65, -90, 107, 108, 118, -57, 67, 95, -13, 71, 103, -13, 26, 117, 29, -42, 87, 90, -69, 63, 27, -69, -81, 54, 119, -113, -18, -6, 1, 24, -128, 1, 24, -128, 1, 24, -128, 1, 24, -128, 31, 2, 12, 0, -15, 106, -105, 125, -85, -120, -80, 33, 0, 0, 0, 0, 73, 69, 78, 68, -82, 66, 96, -126 };
		Map<String, byte[]> imagesMap = new HashMap<String, byte[]>();
		imagesMap.put("icon1.jpg", icono);
		imagesMap.put("icon2.jpg", icono);
		imagesMap.put("icon3.jpg", icono);
		imagesMap.put("icon4.jpg", icono);
		return imagesMap;
	}
	
	public ByteArrayOutputStream filesWithNamesToZippedByteArrayOutputStream(Map<String, byte[]> imagesMap) throws IOException {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		ZipOutputStream zout = new ZipOutputStream(out);
		for(Map.Entry<String, byte[]> image: imagesMap.entrySet()) {
			ZipEntry ze = new ZipEntry(image.getKey());
			zout.putNextEntry(ze);
			zout.write(image.getValue());
			zout.closeEntry();
		}
		zout.close();
		return out;
	}

	@Override
	public InputStreamResource byteArrayOutputStreamToInputStreamResource(ByteArrayOutputStream out) {
		ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
		return new InputStreamResource(in);
	}

}
